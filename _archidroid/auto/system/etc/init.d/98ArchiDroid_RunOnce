#!/system/bin/sh

# ArchiDroid RunOnce (Backend) Script
# JustArchi@JustArchi.net

# Not Disabled
#exit 0

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/ArchiDroid"
LOG="$AD/RunOnce.log" # "/dev/null" is no verbose

# Which mode are we using?
# 0 - CyanogenMod
# 1 - Sammy
# 2 - Omni
ROM=0
if [ `cat /system/build.prop | grep "ro.omni.version" | wc -l` -gt 0 ]; then
	ROM=2
elif [ `cat /system/build.prop | grep "ro.build.user=se.infra" | wc -l` -gt 0 ]; then
	ROM=1
fi

if [ -e $AD/RunOnce.log ] && [ ! -e $AD/RunOnce.log.0 ]; then
	mv $AD/RunOnce.log $AD/RunOnce.log.0
fi

# Redirect stderr to our log, just in case something bad happen
#exec 1>$LOG # Use "exec 1>>$LOG" for append
echo -n "" > $LOG
exec 2>>$LOG

# Main code

ADARGS() {
	# $1 - what we're looking for
	# $2 - where we're looking for
	if [ ! -z `echo "$2" | grep -i "$1"` ]; then
		return 0
	else
		return 1
	fi
}

DBUPDATE() {
	# Thanks to idcrisis, modified by JustArchi
	local DONE=0
	local TRY=0
	local SQLITE3='/system/xbin/sqlite3'
	local VAL1=""
	local VAL2=""
	local ID=""
	
	while [ $DONE -ne 1 ] ; do
		TRY=`expr $TRY + 1`
		if [ "$4" == "APPEND" ]; then
			# Append mode, value should exist already then
			VAL1=`$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null`
			VAL1=$VAL1$5$3
			
			# Let's update it now
			$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$VAL1' where name='$2';" 2>/dev/null
			
			# See if it worked
			VAL2=`$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null`
			
			if [ "$VAL1" == "$VAL2" ]; then
				# Looks good
				if [ $TRY -gt 1 ]; then
					echo "INFO: DBUPDATE APPEND SUCCEEDED with $@. It was our $TRY try" >> $LOG
				fi
				DONE=1
				return 0
			else
				# We failed, let's try maximum of 5 times before giving up
				echo "WARNING: DBUPDATE APPEND FAILED with $@. This is our $TRY try" >> $LOG
				sleep 1
				if [ $TRY -ge 5 ]; then
					echo "ERROR: Could not update $@ after $TRY times. I'm giving up here, please investigate!" >> $LOG
					DONE=1
					return 1
				fi
			fi
		else
			# Try to update value first if exists
			busybox sync
			$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$3' where name='$2';" 2>/dev/null
			busybox sync
			
			# See if it worked
			VAL1=`$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null`
			
			# If not create it
			if [ "$VAL1" != "" ]; then
				# Looks good
				DONE=1
				return 0
			else
				#ID=`sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select max(_id)+100 from $1;"`
				#if [ "$ID" == "" ]; then 
				#	ID='null'
				#fi
				ID='null'

				$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "insert into $1 values($ID, '$2', '$3');" 2>/dev/null
				busybox sync
			fi
			
			# Check if in fact we modified that
			VAL1=`$SQLITE3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null`
			if [ "$VAL1" != "" ]; then
				# Looks good
				if [ $TRY -gt 1 ]; then
					echo "INFO: DBUPDATE SUCCEEDED with $@. It was our $TRY try" >> $LOG
				fi
				DONE=1
				return 0
			else
				# We failed, let's try maximum of 5 times before giving up
				echo "WARNING: DBUPDATE FAILED with $@. This is our $TRY try" >> $LOG
				sleep 1
				if [ $TRY -ge 5 ]; then
					echo "ERROR: Could not update $@ after $TRY times. I'm giving up here, please investigate!" >> $LOG
					DONE=1
					return 1
				fi
			fi
		fi
	done
}

# Parse args to variables
if ADARGS "background" "$@" ; then
	BACKGROUND=1
else
	BACKGROUND=0
fi
if ADARGS "forcedsemaphore" "$@" ; then
	FORCEDSEMAPHORE=1
else
	FORCEDSEMAPHORE=0
fi

echo "`date`" >> $LOG
echo "`uname -a`" >> $LOG
echo "INFO: ArchiDroid_RunOnce executed!" >> $LOG

# Now we need to make sure that this is background process to prevent slowing down bootup
if [ $BACKGROUND -ne 1 ]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "INFO: Spawning child!" >> $LOG
	sh $0 "background" &

	# Nothing to do here anymore, exit call
	exit 1
else
	# We're running in background so let's proceed
	echo "INFO: I'm a child!" >> $LOG
fi

# Custom boot sound support
if [ -e $AD/PowerOn.wav ]; then
	tinyplay $AD/PowerOn.wav > /dev/null 2>&1 &
fi

# We don't need to reload anything for now
ADRELOAD=0

# Don't force install mode, unless FORCE file exists
if [ -e $AD/FORCE ]; then
	echo "WARNING: Forcing Install mode, even if Update mode found!" >> $LOG
	FORCE=1
else
	echo "INFO: Not forcing Install mode if Update mode found" >> $LOG
	FORCE=0
fi

# We want some sqlite3 updates and settings but only if INSTALL mode is enabled
if [ -e $AD/INSTALL ] || [ $FORCE -eq 1 ]; then
	echo "INFO: Install mode detected, I'm either after full wipe or forced to think so. Turning on ADMANY and DBUPDATE" >> $LOG
	INSTALLMODE=1
	if [ -d $AD/FIRSTBOOT/DATA ]; then
		cd $AD/FIRSTBOOT/DATA
		ADMANY=`ls | wc -l`
	else
		ADMANY=0
	fi
	echo "INFO: I found $ADMANY folders which need merging (data)" >> $LOG
	DBUPDATE=1
	ADRELOAD=1
elif [ -e $AD/UPDATE ]; then
	echo "INFO: Update mode detected. Turning off ADMANY and DBUPDATE" >> $LOG
	INSTALLMODE=0
	DBUPDATE=0
	ADMANY=0
else
	# Panic
	echo "FATAL ERROR: Could not detect Install/Update mode, ABORTING RUNONCE, PLEASE INVESTIGATE" >> $LOG
	sysrw || mount -o remount,rw /system
	rm -f $0
	sysro || mount -o remount,ro /system
	exit 2
fi

rm -f $AD/RunOnce.log.0

# Cool ArchiDroid Banner
if [ -e /system/bin/boot-dmesg ]; then
	echo "INFO: boot-dmesg detected, turning on logcat banner" >> $LOG
	ADBANNER=1
else
	echo "INFO: boot-dmesg NOT detected, turning off logcat banner" >> $LOG
	ADBANNER=0
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: RunOnce Semaphore started" >> $LOG
LOOP=0
while (! pgrep com.android && [ $LOOP -lt 150 ]) || [ $FORCEDSEMAPHORE -eq 1 ] ; do

	if [ $ADBANNER -eq 1 ]; then
		echo "
*******************************************************************************
*             _                _      _  ____               _      _          *
*            / \    _ __  ___ | |__  (_)|  _ \  _ __  ___  (_)  __| |         *
*           / _ \  | '__|/ __|| '_ \ | || | | || '__|/ _ \ | | / _\` |         *
*          / ___ \ | |  | (__ | | | || || |_| || |  | (_) || || (_| |         *
*         /_/   \_\|_|   \___||_| |_||_||____/ |_|   \___/ |_| \__,_|         *
*                                                                             *
*******************************************************************************
*                  _                       _  _                               *
*                 | |     ___    __ _   __| |(_) _ __    __ _                 *
*                 | |    / _ \  / _\` | / _\` || || '_ \  / _\` |                *
*                 | |___| (_) || (_| || (_| || || | | || (_| |                *
*                 |_____|\___/  \__,_| \__,_||_||_| |_| \__, |                *
*                                                       |___/                 *
*******************************************************************************
*            root@ArchiDroid:~# Waiting for ArchiDroid to load...             *
*******************************************************************************
"
	fi
	
	if [ $DBUPDATE -eq 1 ]; then
		if [ -e /data/data/com.android.providers.settings/databases/settings.db ]; then
			echo "INFO: Android created settings.db for me, how cute! Performing DBUPDATE" >> $LOG
			
			# Let's update selected keyboard according to our choice
			# TODO: We should handle this internally, according to FIRSTBOOT instead of hardcoding keyboards
			ONESHOT=1
			for KEYBOARDFULL in "org.pocketworkstation.pckeyboard/.LatinIME" "com.cootek.smartinputv5/com.cootek.smartinput5.TouchPalIME" "com.google.android.googlequicksearchbox/com.google.android.voicesearch.ime.VoiceInputMethodService" ; do
				KEYBOARD=`echo $KEYBOARDFULL | cut -d '/' -f 1`
				if [ -e /data/data/$KEYBOARD ] && [ ONESHOT -eq 1 ]; then
					echo "INFO: $KEYBOARD Keyboard found!" >> $LOG
					DBUPDATE secure default_input_method "$KEYBOARDFULL"
					DBUPDATE secure enabled_input_methods "$KEYBOARDFULL"
					ONESHOT=0
				elif [ -e /data/data/$KEYBOARD ]; then
					echo "INFO: Additional $KEYBOARD Keyboard found!" >> $LOG
					#DBUPDATE secure enabled_input_methods "$KEYBOARDFULL" APPEND ":"
				fi
			done
			
			DBUPDATE secure advanced_reboot 1
			DBUPDATE global transition_animation_scale 0.5
			DBUPDATE global animator_duration_scale 0.5
			DBUPDATE global window_animation_scale 0.5
			DBUPDATE global wifi_scan_always_enabled 0
			DBUPDATE global install_non_market_apps 1
			DBUPDATE global development_settings_enabled 1
			DBUPDATE global adb_enabled 0
			
			if [ $ROM -eq 1 ]; then
				echo "INFO: Applying Samsung-specific DBUPDATE" >> $LOG
				DBUPDATE system lockscreen_ripple_effect 0
				DBUPDATE system screen_mode_automatic_setting 0
				DBUPDATE system screen_mode_setting 2
			else
				echo "INFO: Applying AOSP-specific DBUPDATE" >> $LOG
				# OMNI
				DBUPDATE system screen_off_animation 0
				#DBUPDATE system power_menu_screenshot_enabled 1
				DBUPDATE system screenshot_in_power_menu 1
				DBUPDATE system clear_recents_button_location 3
				DBUPDATE system non_intrusive_incall 1
				
				# Currently Inactive
				#DBUPDATE secure kill_app_longpress_back 1
				#DBUPDATE system status_bar_battery 4
				#DBUPDATE system statusbar_clock_date_display 2
				#DBUPDATE system statusbar_clock_date_format 'MMM dd'
				#DBUPDATE system status_bar_traffic 0
				#DBUPDATE system button_backlight_timeout 1000
				#DBUPDATE system recents_clear_all_on_right 1
				#DBUPDATE system recents_ram_bar_mode 3
				
				# Requires SlimBean's Dark Droid
				#DBUPDATE secure ui_inverted_mode 2
				
				# Reguires AOKP Custom Animations
				#DBUPDATE system animation_controls_no_override 1
				#DBUPDATE system animation_controls_duration 34
				#DBUPDATE system task_open 8
				#DBUPDATE system task_close 8
				#DBUPDATE system task_to_front 8
				#DBUPDATE system task_to_back 8
				#DBUPDATE system wallpaper_open 8
				#DBUPDATE system wallpaper_close 8
				#DBUPDATE system wallpaper_intra_open 8
				#DBUPDATE system wallpaper_intra_close 8
				#DBUPDATE system activity_open 8
				#DBUPDATE system activity_close 8
				
				# Requires ListView Animations
				#DBUPDATE system listview_animation 4
				#DBUPDATE system listview_interpolator 5
			fi
			
			# And don't execute twice
			echo "INFO: Finished DBUPDATE" >> $LOG
			DBUPDATE=0
		fi
	fi
	
	# Now let's MAKE SURE that our settings are in fact applied, only if we don't have shared_prefs already (prevent non-clean override)
	if [ $ADMANY -gt 0 ]; then
		cd $AD/FIRSTBOOT/DATA
		for FOLDER in * ; do
			if [ -d /data/data/$FOLDER ]; then
				echo "INFO: I'm merging $FOLDER, called by ADMANY" >> $LOG
				ADOWNER=`ls -ld /data/data/$FOLDER | awk '{print $3}'`
				mkdir /data/data/$FOLDER/_ADTEMP
				cp -R $FOLDER/* /data/data/$FOLDER/_ADTEMP/
				
				# I hate using implementations like this one, our shell is very limited. Forgive me
				echo "cd /data/data/$FOLDER/_ADTEMP && cp -R * .." | su "$ADOWNER"
				
				if [ $? -eq 0 ]; then
					if [ $ROM -ne 0 ]; then
						# Screw security, alright?
						# It may not be required in near future, but as for now it is
						echo "WARNING: This ROM doesn't care about security, falling back to dirty chmod permissions!" >> $LOG
						busybox chmod -R 777 /data/data/$FOLDER/*
					fi
					echo "INFO: It looks like everything ended successfully on $FOLDER" >> $LOG
				else
					echo "ERROR: su failed on $FOLDER, falling back to dirty chmod permissions, please investigate!" >> $LOG
					cd /data/data/$FOLDER/_ADTEMP && cp -R * .. && cd $AD/FIRSTBOOT/DATA
					busybox chmod -R 777 /data/data/$FOLDER/*
				fi

				# And we're done!
				rm -Rf $FOLDER
				rm -Rf /data/data/$FOLDER/_ADTEMP
				ADOWNER=""
				ADMANY=`ls | wc -l`
				echo "INFO: $ADMANY to go" >> $LOG
			fi
		done
		#ADMANY=`ls | wc -l`
	fi

	# Sleeping time
	FORCEDSEMAPHORE=0
	LOOP=`expr $LOOP + 1`
	sleep 2
done

if [ $LOOP -ge 150 ]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (RunOnce Semaphore)" >> $LOG
elif [ $LOOP -eq 0 ]; then
	echo "ERROR: I didn't even entered semaphore, forcing it this time, it may cause unexpected behaviour!" >> $LOG
	sh $0 "background" "forcedsemaphore" &
	exit 3
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (RunOnce Semaphore)" >> $LOG
fi

# Post-Installation functions
if [ $INSTALLMODE -eq 1 ]; then
	echo "INFO: Calling Post-Installation functions (if any)" >> $LOG
fi

# I'm runonce script so let's clean everything and delete myself
rm -f $AD/INSTALL
rm -f $AD/UPDATE
rm -f $AD/FORCE
rm -Rf $AD/FIRSTBOOT
rm -Rf /data/media/0/vrtheme-backup
sysrw || mount -o remount,rw /system
rm -f $0
busybox sync
#sysro || mount -o remount,ro /system

if [ ! -e "$0" ]; then
	echo "INFO: Could not detect RunOnce in init.d after cleanup, that's good" >> $LOG
else
	echo "ERROR: I've detected RunOnce still in init.d after cleanup, that's not good, please investigate" >> $LOG
fi

# Execute a reboot if we need it
if [ $ADRELOAD -eq 1 ]; then
	echo "INFO: Reboot required, I'm rebooting the device right now" >> $LOG
	echo "INFO: ArchiDroid RunOnce finished" >> $LOG
	echo "`date`" >> $LOG
	busybox sync
	tinyplay $AD/System/reboot.wav > /dev/null 2>&1
	reboot
	#killall system_server
	#sleep 10
else
	sleep 20
	sysro || mount -o remount,ro /system
	# Finish
	echo "INFO: ArchiDroid RunOnce finished" >> $LOG
	echo "`date`" >> $LOG
fi
exit 0
